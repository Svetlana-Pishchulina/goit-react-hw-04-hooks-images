{"version":3,"sources":["components/ImageGalleryItem/ImageGalleryItem.module.css","components/Modal/Modal.module.css","components/ImageGallery/ImageGallery.module.css","components/Button/Button.module.css","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.js","components/ImageGallery/ImageGallery.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Button/Button.js","components/Modal/Modal.js","servises/api.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Searchbar","onSubmit","useState","searchWord","setSearchWord","reset","className","styles","SearchForm","evt","preventDefault","type","SearchFormButton","SearchFormButtonLabel","onChange","target","value","SearchFormInput","autoComplete","autoFocus","placeholder","ImageGallery","children","ImageGalleryItem","pictureId","srcWebformat","onClick","src","alt","ImageGalleryItemImage","Button","modalRoot","document","getElementById","Modal","toggleModal","handleKeyDown","e","code","useEffect","window","addEventListener","removeEventListener","createPortal","currentTarget","Overlay","axios","defaults","baseURL","request","currentPage","pageSize","get","then","response","data","hits","App","pictures","setPictures","setRequest","setCurrentPage","largeImageURL","setLargeImageURL","isModalOpen","setIsModalOpen","isLoading","setIsLoading","setError","fatchPictures","scrollTo","top","documentElement","scrollHeight","behavior","option","api","picturesArr","catch","error","finally","prevState","shouldRenderLoadMoreButton","length","query","map","id","webformatURL","color","height","width","timeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e7a029d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__XQEaF\",\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage___YB_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__2xVtF\",\"Modal\":\"Modal_Modal__2DKt8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__2xuww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1ujWD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__y8TIg\",\"SearchForm\":\"Searchbar_SearchForm__2zYOD\",\"SearchFormButton\":\"Searchbar_SearchFormButton__10RMB\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__3ZgM7\",\"SearchFormInput\":\"Searchbar_SearchFormInput__1BWUD\"};","import React, { useState } from \"react\";\r\nimport styles from \"./Searchbar.module.css\";\r\n\r\nconst Searchbar = ({ onSubmit }) => {\r\n  const [searchWord, setSearchWord] = useState(\"\");\r\n\r\n  const inputChangeHandler = (evt) => {\r\n    setSearchWord(evt.target.value);\r\n  };\r\n\r\n  const formSubmitHandler = (evt) => {\r\n    evt.preventDefault();\r\n    onSubmit(searchWord);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setSearchWord(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className={styles.Searchbar}>\r\n        <form className={styles.SearchForm} onSubmit={formSubmitHandler}>\r\n          <button type=\"submit\" className={styles.SearchFormButton}>\r\n            <span className={styles.SearchFormButtonLabel}>Search</span>\r\n          </button>\r\n\r\n          <input\r\n            onChange={inputChangeHandler}\r\n            className={styles.SearchFormInput}\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            value={searchWord}\r\n          />\r\n        </form>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n\r\n// class Searchbar extends React.Component {\r\n//   state = {\r\n//     searchWord: \"\",\r\n//   };\r\n\r\n//   inputChangeHandler = (evt) => {\r\n//     this.setState({ searchWord: evt.target.value });\r\n//   };\r\n\r\n//   formSubmitHandler = (evt) => {\r\n//     evt.preventDefault();\r\n//     this.props.onSubmit(this.state.searchWord);\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ searchWord: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <header className={styles.Searchbar}>\r\n//           <form className={styles.SearchForm} onSubmit={this.formSubmitHandler}>\r\n//             <button type=\"submit\" className={styles.SearchFormButton}>\r\n//               <span className={styles.SearchFormButtonLabel}>Search</span>\r\n//             </button>\r\n\r\n//             <input\r\n//               onChange={this.inputChangeHandler}\r\n//               className={styles.SearchFormInput}\r\n//               type=\"text\"\r\n//               autoComplete=\"off\"\r\n//               autoFocus\r\n//               placeholder=\"Search images and photos\"\r\n//               value={this.state.searchWord}\r\n//             />\r\n//           </form>\r\n//         </header>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Searchbar;\r\n// ______________________________\r\n","import styles from \"./ImageGallery.module.css\";\r\nconst ImageGallery = ({ children }) => {\r\n  return <ul className={styles.ImageGallery}>{children}</ul>;\r\n};\r\n\r\nexport default ImageGallery;\r\n","import styles from \"./ImageGalleryItem.module.css\";\r\nconst ImageGalleryItem = ({ pictureId, srcWebformat, onClick }) => {\r\n  return (\r\n    <li className={styles.ImageGalleryItem} onClick={onClick}>\r\n      <img src={srcWebformat} alt=\"\" className={styles.ImageGalleryItemImage} />\r\n    </li>\r\n  );\r\n};\r\nexport default ImageGalleryItem;\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\nconst Button = ({ onClick }) => {\r\n  return (\r\n    <button className={styles.Button} type=\"button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n","import styles from \"./Modal.module.css\";\r\nimport { createPortal } from \"react-dom\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst modalRoot = document.getElementById(\"modal-root\");\r\n\r\nconst Modal = ({ toggleModal, children }) => {\r\n  const handleKeyDown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      toggleModal();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleBackdropClick = (e) => {\r\n    if (e.target === e.currentTarget) {\r\n      toggleModal();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div onClick={handleBackdropClick} className={styles.Overlay}>\r\n      <div className={styles.Modal}>{children}</div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n// ______________\r\n// class Modal extends React.Component {\r\n//   componentDidMount() {\r\n//     window.addEventListener(\"keydown\", this.hendleKeyDown);\r\n//   }\r\n\r\n//   componentWillUnmount() {\r\n//     window.removeEventListener(\"keydown\", this.hendleKeyDown);\r\n//   }\r\n\r\n//   hendleKeyDown = (e) => {\r\n//     if (e.code === \"Escape\") {\r\n//       this.props.toggleModal();\r\n//     }\r\n//   };\r\n\r\n//   hendleBackdropClick = (e) => {\r\n//     if (e.target === e.currentTarget) {\r\n//       this.props.toggleModal();\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     return createPortal(\r\n//       <div onClick={this.hendleBackdropClick} className={styles.Overlay}>\r\n//         <div className={styles.Modal}>{this.props.children}</div>\r\n//       </div>,\r\n//       modalRoot\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Modal;\r\n// _____________________________\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://pixabay.com/api/\";\r\nconst API_KEY = \"21205558-461e6a7a88c8071e477290c49\";\r\n\r\nconst fatchPictures = ({ request = \"\", currentPage = 1, pageSize = 12 }) => {\r\n  return axios\r\n    .get(\r\n      `/?key=${API_KEY}&q=${request}&page=${currentPage}&image_type=photo&orientation=horizontal&per_page=${pageSize}`\r\n    )\r\n    .then((response) => response.data.hits);\r\n};\r\n\r\nexport default { fatchPictures };\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Searchbar from \"./components/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery\";\nimport ImageGalleryItem from \"./components/ImageGalleryItem\";\nimport Button from \"./components/Button\";\nimport Modal from \"./components/Modal\";\nimport api from \"./servises/api\";\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nconst App = () => {\n  const [pictures, setPictures] = useState([]);\n  const [request, setRequest] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [largeImageURL, setLargeImageURL] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!request) {\n      return;\n    }\n    fatchPictures();\n  }, [request]);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: \"smooth\",\n    });\n  }, [pictures]);\n\n  const onChangeRequest = (query) => {\n    setPictures([]);\n    setRequest(query);\n    setCurrentPage(1);\n    setError(null);\n  };\n\n  const fatchPictures = () => {\n    const option = { request, currentPage };\n    setIsLoading(true);\n    api\n      .fatchPictures(option)\n      .then(\n        (picturesArr) => setPictures([...pictures, ...picturesArr]),\n        setCurrentPage(currentPage + 1)\n      )\n      .catch((error) => setError(error))\n      .finally(() => setIsLoading(false));\n  };\n\n  const onPictureClick = (url) => {\n    setLargeImageURL(url);\n    toggleModal();\n  };\n\n  const toggleModal = () => {\n    setIsModalOpen((prevState) => !prevState);\n  };\n\n  const shouldRenderLoadMoreButton = pictures.length > 0 && !isLoading;\n  return (\n    <>\n      <Searchbar onSubmit={onChangeRequest}></Searchbar>\n\n      <ImageGallery>\n        {pictures.map(({ id, webformatURL, largeImageURL }) => (\n          <ImageGalleryItem\n            key={id}\n            srcWebformat={webformatURL}\n            pictureId={id}\n            onClick={() => onPictureClick(largeImageURL)}\n          />\n        ))}\n      </ImageGallery>\n      {isModalOpen && (\n        <Modal toggleModal={toggleModal}>\n          <img src={largeImageURL} alt=\"\" />\n        </Modal>\n      )}\n      {isLoading && (\n        <Loader\n          type=\"ThreeDots\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n          timeout={3000} //3 secs\n        />\n      )}\n      {shouldRenderLoadMoreButton && <Button onClick={fatchPictures} />}\n    </>\n  );\n};\n\nexport default App;\n\n// ___________________________\n// class App extends React.Component {\n//   state = {\n//     pictures: [],\n//     request: \"\",\n//     currentPage: 1,\n//     largeImageURL: \"\",\n//     isModalOpen: false,\n//     isLoading: false,\n//     error: null,\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.request !== this.state.request) {\n//       this.fatchPictures();\n//     }\n//     window.scrollTo({\n//       top: document.getElementById(\"root\").scrollHeight,\n//       behavior: \"smooth\",\n//     });\n//   }\n\n//   onChangeRequest = (query) => {\n//     this.setState({\n//       pictures: [],\n//       request: query,\n//       currentPage: 1,\n//       error: null,\n//     });\n//   };\n\n//   fatchPictures = () => {\n//     const { request, currentPage } = this.state;\n//     const option = { request, currentPage };\n\n//     this.setState({ isLoading: true });\n\n//     api\n//       .fatchPictures(option)\n//       .then((picturesArr) =>\n//         this.setState((prevState) => ({\n//           pictures: [...prevState.pictures, ...picturesArr],\n//           currentPage: prevState.currentPage + 1,\n//         }))\n//       )\n//       .catch((error) => this.setState({ error: error }))\n//       .finally(() => this.setState({ isLoading: false }));\n//   };\n\n//   onPictureClick = (url) => {\n//     this.setState({ largeImageURL: url });\n//     this.toggleModal();\n//   };\n\n//   toggleModal = () => {\n//     this.setState((prevState) => ({ isModalOpen: !prevState.isModalOpen }));\n//   };\n\n//   render() {\n//     const { pictures, isLoading, largeImageURL, isModalOpen } = this.state;\n//     const shouldRenderLoadMoreButton = pictures.length > 0 && !isLoading;\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.onChangeRequest}></Searchbar>\n\n//         <ImageGallery>\n//           {pictures.map(({ id, webformatURL, largeImageURL }) => (\n//             // <li\n//             //   key={id}\n//             //   onClick={() => this.onPictureClick(largeImageURL)}\n//             //   className={styles.ImageGalleryItem}\n//             // >\n//             <ImageGalleryItem\n//               srcWebformat={webformatURL}\n//               pictureId={id}\n//               onClick={() => this.onPictureClick(largeImageURL)}\n//             />\n//             // </li>\n//           ))}\n//         </ImageGallery>\n//         {isModalOpen && (\n//           <Modal toggleModal={this.toggleModal}>\n//             <img src={largeImageURL} alt=\"\" />\n//           </Modal>\n//         )}\n//         {isLoading && (\n//           <Loader\n//             type=\"ThreeDots\"\n//             color=\"#00BFFF\"\n//             height={100}\n//             width={100}\n//             timeout={3000} //3 secs\n//           />\n//         )}\n//         {shouldRenderLoadMoreButton && <Button onClick={this.fatchPictures} />}\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n// _________________________________\n// не работает\n// const App = () => {\n//   const [pictures, setPictures] = useState([]);\n//   const [request, setRequest] = useState(\"\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [largeImageURL, setLargeImageURL] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const fatchPictures = () => {\n//     const option = { request, currentPage };\n//     setIsLoading(true);\n//     api\n//       .fatchPictures(option)\n//       .then((picturesArr) => setPictures([...pictures, ...picturesArr]))\n//       .catch((error) => setError(error))\n//       .finally(() => setIsLoading(false));\n//   };\n\n//   useEffect(() => {\n//     if (!request) {\n//       return;\n//     }\n//     fatchPictures();\n//   }, [request,currentPage]);\n\n//   const onChangeRequest = (query) => {\n//     setPictures([]);\n//     setRequest(query);\n//     setCurrentPage(1);\n//     setError(null);\n//   };\n\n//   const onPictureClick = (url) => {\n//     setLargeImageURL(url);\n//     toggleModal();\n//   };\n\n//   const toggleModal = () => {\n//     setIsModalOpen((prevState) => !prevState);\n//   };\n\n//   const shouldRenderLoadMoreButton = pictures.length > 0 && !isLoading;\n//   return (\n//     <>\n//       <Searchbar onSubmit={onChangeRequest}></Searchbar>\n\n//       <ImageGallery>\n//         {pictures.map(({ id, webformatURL, largeImageURL }) => (\n//           // <li\n//           //   key={id}\n//           //   onClick={() => this.onPictureClick(largeImageURL)}\n//           //   className={styles.ImageGalleryItem}\n//           // >\n//           <ImageGalleryItem\n//             key={id}\n//             srcWebformat={webformatURL}\n//             pictureId={id}\n//             onClick={() => onPictureClick(largeImageURL)}\n//           />\n//           // </li>\n//         ))}\n//       </ImageGallery>\n//       {isModalOpen && (\n//         <Modal toggleModal={toggleModal}>\n//           <img src={largeImageURL} alt=\"\" />\n//         </Modal>\n//       )}\n//       {isLoading && (\n//         <Loader\n//           type=\"ThreeDots\"\n//           color=\"#00BFFF\"\n//           height={100}\n//           width={100}\n//           timeout={3000} //3 secs\n//         />\n//       )}\n//       {shouldRenderLoadMoreButton && (\n//         <Button onClick={setCurrentPage((page) => page + 1)} />\n//       )}\n//     </>\n//   );\n// };\n\n// export default App;\n// // _______________________________\n// function App() {\n//   const [pictures, setPictures] = useState([]);\n//   const [request, setRequest] = useState(\"\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [largeImageURL, setLargeImageURL] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     if (!request) {\n//       return;\n//     }\n//     const fatchPictures = () => {\n//       const option = { request, currentPage };\n\n//       setIsLoading(true);\n\n//       api\n//         .fatchPictures(option)\n//         .then((picturesArr) => {\n//           setPictures((pictures) => [...pictures, ...picturesArr]);\n//           // setCurrentPage((page) => page + 1);\n//         })\n//         .catch((error) => setError(error))\n//         .finally(() => setIsLoading(false));\n//     };\n//     fatchPictures();\n//     window.scrollTo({\n//       top: document.getElementById(\"root\").scrollHeight,\n//       behavior: \"smooth\",\n//     });\n//   }, [request, currentPage]);\n\n//   const onChangeRequest = (query) => {\n//     setPictures([]);\n//     setRequest(query);\n//     setCurrentPage(1);\n//     setError(null);\n//   };\n\n//   const onPictureClick = (url) => {\n//     setLargeImageURL(url);\n//     toggleModal();\n//   };\n\n//   const toggleModal = () => {\n//     setIsModalOpen((prevState) => !prevState);\n//   };\n\n//   const shouldRenderLoadMoreButton = pictures.length > 0 && !isLoading;\n//   return (\n//     <>\n//       <Searchbar onSubmit={onChangeRequest}></Searchbar>\n\n//       <ImageGallery>\n//         {pictures.map(({ id, webformatURL, largeImageURL }) => (\n//           // <li\n//           //   key={id}\n//           //   onClick={() => this.onPictureClick(largeImageURL)}\n//           //   className={styles.ImageGalleryItem}\n//           // >\n//           <ImageGalleryItem\n//             srcWebformat={webformatURL}\n//             pictureId={id}\n//             onClick={() => onPictureClick(largeImageURL)}\n//           />\n//           // </li>\n//         ))}\n//       </ImageGallery>\n//       {isModalOpen && (\n//         <Modal toggleModal={toggleModal}>\n//           <img src={largeImageURL} alt=\"\" />\n//         </Modal>\n//       )}\n//       {isLoading && (\n//         <Loader\n//           type=\"ThreeDots\"\n//           color=\"#00BFFF\"\n//           height={100}\n//           width={100}\n//           timeout={3000} //3 secs\n//         />\n//       )}\n//       {shouldRenderLoadMoreButton && (\n//         <Button onClick={setCurrentPage((page) => page + 1)} />\n//       )}\n//     </>\n//   );\n// }\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}